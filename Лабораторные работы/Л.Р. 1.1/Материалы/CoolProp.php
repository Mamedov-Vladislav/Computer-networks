<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
// if (!extension_loaded('CoolProp')) {
//   if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
//     if (!dl('php_CoolProp.dll')) return;
//   } else {
//     // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
//     if (PHP_SHLIB_SUFFIX === 'dylib') {
//       if (!dl('CoolProp.so')) return;
//     } else {
//       if (!dl('CoolProp.'.PHP_SHLIB_SUFFIX)) return;
//     }
//   }
// }



abstract class CoolProp {
	const INVALID_PARAMETER = 0;

	const igas_constant = igas_constant;

	const imolar_mass = imolar_mass;

	const iacentric_factor = iacentric_factor;

	const irhomolar_reducing = irhomolar_reducing;

	const irhomolar_critical = irhomolar_critical;

	const iT_reducing = iT_reducing;

	const iT_critical = iT_critical;

	const irhomass_reducing = irhomass_reducing;

	const irhomass_critical = irhomass_critical;

	const iP_critical = iP_critical;

	const iP_reducing = iP_reducing;

	const iT_triple = iT_triple;

	const iP_triple = iP_triple;

	const iT_min = iT_min;

	const iT_max = iT_max;

	const iP_max = iP_max;

	const iP_min = iP_min;

	const idipole_moment = idipole_moment;

	const iT = iT;

	const iP = iP;

	const iQ = iQ;

	const iTau = iTau;

	const iDelta = iDelta;

	const iDmolar = iDmolar;

	const iHmolar = iHmolar;

	const iSmolar = iSmolar;

	const iCpmolar = iCpmolar;

	const iCp0molar = iCp0molar;

	const iCvmolar = iCvmolar;

	const iUmolar = iUmolar;

	const iGmolar = iGmolar;

	const iHelmholtzmolar = iHelmholtzmolar;

	const iSmolar_residual = iSmolar_residual;

	const iDmass = iDmass;

	const iHmass = iHmass;

	const iSmass = iSmass;

	const iCpmass = iCpmass;

	const iCp0mass = iCp0mass;

	const iCvmass = iCvmass;

	const iUmass = iUmass;

	const iGmass = iGmass;

	const iHelmholtzmass = iHelmholtzmass;

	const iviscosity = iviscosity;

	const iconductivity = iconductivity;

	const isurface_tension = isurface_tension;

	const iPrandtl = iPrandtl;

	const ispeed_sound = ispeed_sound;

	const iisothermal_compressibility = iisothermal_compressibility;

	const iisobaric_expansion_coefficient = iisobaric_expansion_coefficient;

	const ifundamental_derivative_of_gas_dynamics = ifundamental_derivative_of_gas_dynamics;

	const ialphar = ialphar;

	const idalphar_dtau_constdelta = idalphar_dtau_constdelta;

	const idalphar_ddelta_consttau = idalphar_ddelta_consttau;

	const ialpha0 = ialpha0;

	const idalpha0_dtau_constdelta = idalpha0_dtau_constdelta;

	const idalpha0_ddelta_consttau = idalpha0_ddelta_consttau;

	const iBvirial = iBvirial;

	const iCvirial = iCvirial;

	const idBvirial_dT = idBvirial_dT;

	const idCvirial_dT = idCvirial_dT;

	const iZ = iZ;

	const iPIP = iPIP;

	const ifraction_min = ifraction_min;

	const ifraction_max = ifraction_max;

	const iT_freeze = iT_freeze;

	const iGWP20 = iGWP20;

	const iGWP100 = iGWP100;

	const iGWP500 = iGWP500;

	const iFH = iFH;

	const iHH = iHH;

	const iPH = iPH;

	const iODP = iODP;

	const iPhase = iPhase;

	const iundefined_parameter = iundefined_parameter;

	const iphase_liquid = 0;

	const iphase_supercritical = iphase_supercritical;

	const iphase_supercritical_gas = iphase_supercritical_gas;

	const iphase_supercritical_liquid = iphase_supercritical_liquid;

	const iphase_critical_point = iphase_critical_point;

	const iphase_gas = iphase_gas;

	const iphase_twophase = iphase_twophase;

	const iphase_unknown = iphase_unknown;

	const iphase_not_imposed = iphase_not_imposed;

	static function get_parameter_information($key,$info) {
		return get_parameter_information($key,$info);
	}

	static function get_parameter_index($param_name) {
		return get_parameter_index($param_name);
	}

	static function get_phase_index($param_name) {
		return get_phase_index($param_name);
	}

	static function is_trivial_parameter($key) {
		return is_trivial_parameter($key);
	}

	static function is_valid_parameter($name,$iOutput) {
		return is_valid_parameter($name,$iOutput);
	}

	static function is_valid_first_derivative($name,$iOf,$iWrt,$iConstant) {
		return is_valid_first_derivative($name,$iOf,$iWrt,$iConstant);
	}

	static function is_valid_first_saturation_derivative($name,$iOf,$iWrt) {
		return is_valid_first_saturation_derivative($name,$iOf,$iWrt);
	}

	static function is_valid_second_derivative($name,$iOf1,$iWrt1,$iConstant1,$iWrt2,$iConstant2) {
		return is_valid_second_derivative($name,$iOf1,$iWrt1,$iConstant1,$iWrt2,$iConstant2);
	}

	static function get_csv_parameter_list() {
		return get_csv_parameter_list();
	}

	const IFRAC_MASS = 0;

	const IFRAC_MOLE = IFRAC_MOLE;

	const IFRAC_VOLUME = IFRAC_VOLUME;

	const IFRAC_UNDEFINED = IFRAC_UNDEFINED;

	const IFRAC_PURE = IFRAC_PURE;

	const FLUID_TYPE_PURE = 0;

	const FLUID_TYPE_PSEUDOPURE = FLUID_TYPE_PSEUDOPURE;

	const FLUID_TYPE_REFPROP = FLUID_TYPE_REFPROP;

	const FLUID_TYPE_INCOMPRESSIBLE_LIQUID = FLUID_TYPE_INCOMPRESSIBLE_LIQUID;

	const FLUID_TYPE_INCOMPRESSIBLE_SOLUTION = FLUID_TYPE_INCOMPRESSIBLE_SOLUTION;

	const FLUID_TYPE_UNDEFINED = FLUID_TYPE_UNDEFINED;

	const INPUT_PAIR_INVALID = 0;

	const QT_INPUTS = QT_INPUTS;

	const PQ_INPUTS = PQ_INPUTS;

	const QSmolar_INPUTS = QSmolar_INPUTS;

	const QSmass_INPUTS = QSmass_INPUTS;

	const HmolarQ_INPUTS = HmolarQ_INPUTS;

	const HmassQ_INPUTS = HmassQ_INPUTS;

	const DmolarQ_INPUTS = DmolarQ_INPUTS;

	const DmassQ_INPUTS = DmassQ_INPUTS;

	const PT_INPUTS = PT_INPUTS;

	const DmassT_INPUTS = DmassT_INPUTS;

	const DmolarT_INPUTS = DmolarT_INPUTS;

	const HmolarT_INPUTS = HmolarT_INPUTS;

	const HmassT_INPUTS = HmassT_INPUTS;

	const SmolarT_INPUTS = SmolarT_INPUTS;

	const SmassT_INPUTS = SmassT_INPUTS;

	const TUmolar_INPUTS = TUmolar_INPUTS;

	const TUmass_INPUTS = TUmass_INPUTS;

	const DmassP_INPUTS = DmassP_INPUTS;

	const DmolarP_INPUTS = DmolarP_INPUTS;

	const HmassP_INPUTS = HmassP_INPUTS;

	const HmolarP_INPUTS = HmolarP_INPUTS;

	const PSmass_INPUTS = PSmass_INPUTS;

	const PSmolar_INPUTS = PSmolar_INPUTS;

	const PUmass_INPUTS = PUmass_INPUTS;

	const PUmolar_INPUTS = PUmolar_INPUTS;

	const HmassSmass_INPUTS = HmassSmass_INPUTS;

	const HmolarSmolar_INPUTS = HmolarSmolar_INPUTS;

	const SmassUmass_INPUTS = SmassUmass_INPUTS;

	const SmolarUmolar_INPUTS = SmolarUmolar_INPUTS;

	const DmassHmass_INPUTS = DmassHmass_INPUTS;

	const DmolarHmolar_INPUTS = DmolarHmolar_INPUTS;

	const DmassSmass_INPUTS = DmassSmass_INPUTS;

	const DmolarSmolar_INPUTS = DmolarSmolar_INPUTS;

	const DmassUmass_INPUTS = DmassUmass_INPUTS;

	const DmolarUmolar_INPUTS = DmolarUmolar_INPUTS;

	static function match_pair($key1,$key2,$x1,$x2,$swap) {
		return match_pair($key1,$key2,$x1,$x2,$swap);
	}

	static function get_input_pair_index($input_pair_name) {
		return get_input_pair_index($input_pair_name);
	}

	static function get_input_pair_short_desc($pair) {
		return get_input_pair_short_desc($pair);
	}

	static function get_input_pair_long_desc($pair) {
		return get_input_pair_long_desc($pair);
	}

	static function split_input_pair($pair,$p1,$p2) {
		split_input_pair($pair,$p1,$p2);
	}

	static function get_mixture_binary_pair_data($CAS1,$CAS2,$param) {
		return get_mixture_binary_pair_data($CAS1,$CAS2,$param);
	}

	static function set_mixture_binary_pair_data($CAS1,$CAS2,$param,$val) {
		set_mixture_binary_pair_data($CAS1,$CAS2,$param,$val);
	}

	const INVALID_BACKEND_FAMILY = 0;

	const HEOS_BACKEND_FAMILY = HEOS_BACKEND_FAMILY;

	const REFPROP_BACKEND_FAMILY = REFPROP_BACKEND_FAMILY;

	const INCOMP_BACKEND_FAMILY = INCOMP_BACKEND_FAMILY;

	const IF97_BACKEND_FAMILY = IF97_BACKEND_FAMILY;

	const TREND_BACKEND_FAMILY = TREND_BACKEND_FAMILY;

	const TTSE_BACKEND_FAMILY = TTSE_BACKEND_FAMILY;

	const BICUBIC_BACKEND_FAMILY = BICUBIC_BACKEND_FAMILY;

	const SRK_BACKEND_FAMILY = SRK_BACKEND_FAMILY;

	const PR_BACKEND_FAMILY = PR_BACKEND_FAMILY;

	const VTPR_BACKEND_FAMILY = VTPR_BACKEND_FAMILY;

	const INVALID_BACKEND = 0;

	const HEOS_BACKEND_PURE = HEOS_BACKEND_PURE;

	const HEOS_BACKEND_MIX = HEOS_BACKEND_MIX;

	const REFPROP_BACKEND_PURE = REFPROP_BACKEND_PURE;

	const REFPROP_BACKEND_MIX = REFPROP_BACKEND_MIX;

	const INCOMP_BACKEND = INCOMP_BACKEND;

	const IF97_BACKEND = IF97_BACKEND;

	const TREND_BACKEND = TREND_BACKEND;

	const TTSE_BACKEND = TTSE_BACKEND;

	const BICUBIC_BACKEND = BICUBIC_BACKEND;

	const SRK_BACKEND = SRK_BACKEND;

	const PR_BACKEND = PR_BACKEND;

	const VTPR_BACKEND = VTPR_BACKEND;

	static function extract_backend_families($backend_string,$f1,$f2) {
		extract_backend_families($backend_string,$f1,$f2);
	}

	static function extract_backend_families_string($backend_string,$f1,$f2) {
		extract_backend_families_string($backend_string,$f1,$f2);
	}

	static function get_backend_string($backend) {
		return get_backend_string($backend);
	}

	static function Props1SI($FluidName,$Output) {
		return Props1SI($FluidName,$Output);
	}

	static function PropsSI($Output,$Name1,$Prop1,$Name2,$Prop2,$FluidName) {
		return PropsSI($Output,$Name1,$Prop1,$Name2,$Prop2,$FluidName);
	}

	static function PropsSImulti($Outputs,$Name1,$Prop1,$Name2,$Prop2,$backend,$fluids,$fractions) {
		$r=PropsSImulti($Outputs,$Name1,$Prop1,$Name2,$Prop2,$backend,$fluids,$fractions);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VectorOfDoubleVector($r);
		}
		return $r;
	}

	static function get_debug_level() {
		return get_debug_level();
	}

	static function set_debug_level($level) {
		set_debug_level($level);
	}

	static function set_error_string($error) {
		set_error_string($error);
	}

	static function set_warning_string($warning) {
		set_warning_string($warning);
	}

	static function saturation_ancillary($fluid_name,$output,$Q,$input,$value) {
		return saturation_ancillary($fluid_name,$output,$Q,$input,$value);
	}

	static function get_global_param_string($ParamName) {
		return get_global_param_string($ParamName);
	}

	static function get_fluid_param_string($FluidName,$ParamName) {
		return get_fluid_param_string($FluidName,$ParamName);
	}

	static function is_valid_fluid_string($fluidstring) {
		return is_valid_fluid_string($fluidstring);
	}

	static function add_fluids_as_JSON($backend,$fluidstring) {
		return add_fluids_as_JSON($backend,$fluidstring);
	}

	static function set_reference_stateS($FluidName,$reference_state) {
		set_reference_stateS($FluidName,$reference_state);
	}

	static function set_reference_stateD($FluidName,$T,$rhomolar,$hmolar0,$smolar0) {
		set_reference_stateD($FluidName,$T,$rhomolar,$hmolar0,$smolar0);
	}

	static function PhaseSI($Name1,$Prop1,$Name2,$Prop2,$FluidName) {
		return PhaseSI($Name1,$Prop1,$Name2,$Prop2,$FluidName);
	}

	static function extract_backend($fluid_string,$backend,$fluid) {
		extract_backend($fluid_string,$backend,$fluid);
	}

	static function extract_fractions($fluid_string,$fractions) {
		return extract_fractions($fluid_string,$fractions);
	}

	const NORMALIZE_GAS_CONSTANTS = 0;

	const CRITICAL_WITHIN_1UK = CRITICAL_WITHIN_1UK;

	const CRITICAL_SPLINES_ENABLED = CRITICAL_SPLINES_ENABLED;

	const SAVE_RAW_TABLES = SAVE_RAW_TABLES;

	const ALTERNATIVE_TABLES_DIRECTORY = ALTERNATIVE_TABLES_DIRECTORY;

	const ALTERNATIVE_REFPROP_PATH = ALTERNATIVE_REFPROP_PATH;

	const ALTERNATIVE_REFPROP_HMX_BNC_PATH = ALTERNATIVE_REFPROP_HMX_BNC_PATH;

	const REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS = REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS;

	const REFPROP_USE_GERG = REFPROP_USE_GERG;

	const REFPROP_USE_PENGROBINSON = REFPROP_USE_PENGROBINSON;

	const MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB = MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB;

	const DONT_CHECK_PROPERTY_LIMITS = DONT_CHECK_PROPERTY_LIMITS;

	const HENRYS_LAW_TO_GENERATE_VLE_GUESSES = HENRYS_LAW_TO_GENERATE_VLE_GUESSES;

	const PHASE_ENVELOPE_STARTING_PRESSURE_PA = PHASE_ENVELOPE_STARTING_PRESSURE_PA;

	const R_U_CODATA = R_U_CODATA;

	const VTPR_UNIFAQ_PATH = VTPR_UNIFAQ_PATH;

	const CONFIGURATION_NOT_DEFINED_TYPE = 0;

	const CONFIGURATION_BOOL_TYPE = CONFIGURATION_BOOL_TYPE;

	const CONFIGURATION_DOUBLE_TYPE = CONFIGURATION_DOUBLE_TYPE;

	const CONFIGURATION_INTEGER_TYPE = CONFIGURATION_INTEGER_TYPE;

	const CONFIGURATION_STRING_TYPE = CONFIGURATION_STRING_TYPE;

	const CONFIGURATION_ENDOFLIST_TYPE = CONFIGURATION_ENDOFLIST_TYPE;

	static function config_key_to_string($keys) {
		return config_key_to_string($keys);
	}

	static function config_string_to_key($s) {
		return config_string_to_key($s);
	}

	static function config_key_description($keys_or_key) {
		return config_key_description($keys_or_key);
	}

	static function get_config_bool($key) {
		return get_config_bool($key);
	}

	static function get_config_double($key) {
		return get_config_double($key);
	}

	static function get_config_string($key) {
		return get_config_string($key);
	}

	static function get_config_as_json_string() {
		return get_config_as_json_string();
	}

	static function set_config_bool($key,$val) {
		set_config_bool($key,$val);
	}

	static function set_config_double($key,$val) {
		set_config_double($key,$val);
	}

	static function set_config_string($key,$val) {
		set_config_string($key,$val);
	}

	static function set_config_as_json_string($s) {
		set_config_as_json_string($s);
	}

	static function HAPropsSI($OutputName,$Input1Name,$Input1,$Input2Name,$Input2,$Input3Name,$Input3) {
		return HAPropsSI($OutputName,$Input1Name,$Input1,$Input2Name,$Input2,$Input3Name,$Input3);
	}

	static function HAProps($OutputName,$Input1Name,$Input1,$Input2Name,$Input2,$Input3Name,$Input3) {
		return HAProps($OutputName,$Input1Name,$Input1,$Input2Name,$Input2,$Input3Name,$Input3);
	}

	static function HAProps_Aux($OutputName,$T,$p,$W,$units) {
		return HAProps_Aux($OutputName,$T,$p,$W,$units);
	}

	static function IceProps($Name,$T,$p) {
		return IceProps($Name,$T,$p);
	}

	static function UseVirialCorrelations($flag) {
		UseVirialCorrelations($flag);
	}

	static function UseIsothermCompressCorrelation($flag) {
		UseIsothermCompressCorrelation($flag);
	}

	static function UseIdealGasEnthalpyCorrelations($flag) {
		UseIdealGasEnthalpyCorrelations($flag);
	}

	static function HAHelp() {
		HAHelp();
	}

	static function returnHumAirCode($Code) {
		return returnHumAirCode($Code);
	}

	static function cair_sat($T) {
		return cair_sat($T);
	}
}

/* PHP Proxy Classes */
class DoubleVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_double_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_DoubleVector(); break;
		default: $this->_cPtr=new_DoubleVector($n);
		}
	}

	function size() {
		return DoubleVector_size($this->_cPtr);
	}

	function capacity() {
		return DoubleVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		DoubleVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		DoubleVector_clear($this->_cPtr);
	}

	function push($x) {
		DoubleVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return DoubleVector_is_empty($this->_cPtr);
	}

	function pop() {
		return DoubleVector_pop($this->_cPtr);
	}

	function get($i) {
		return DoubleVector_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		DoubleVector_set($this->_cPtr,$i,$val);
	}
}

class VectorOfDoubleVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__vectorT_double_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VectorOfDoubleVector(); break;
		default: $this->_cPtr=new_VectorOfDoubleVector($n);
		}
	}

	function size() {
		return VectorOfDoubleVector_size($this->_cPtr);
	}

	function capacity() {
		return VectorOfDoubleVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		VectorOfDoubleVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		VectorOfDoubleVector_clear($this->_cPtr);
	}

	function push($x) {
		VectorOfDoubleVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return VectorOfDoubleVector_is_empty($this->_cPtr);
	}

	function pop() {
		$r=VectorOfDoubleVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function get($i) {
		$r=VectorOfDoubleVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function set($i,$val) {
		VectorOfDoubleVector_set($this->_cPtr,$i,$val);
	}
}

class StringVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__string_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringVector(); break;
		default: $this->_cPtr=new_StringVector($n);
		}
	}

	function size() {
		return StringVector_size($this->_cPtr);
	}

	function capacity() {
		return StringVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		StringVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		StringVector_clear($this->_cPtr);
	}

	function push($x) {
		StringVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return StringVector_is_empty($this->_cPtr);
	}

	function pop() {
		return StringVector_pop($this->_cPtr);
	}

	function get($i) {
		return StringVector_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		StringVector_set($this->_cPtr,$i,$val);
	}
}

class VectorOfStringVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__vectorT_std__string_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VectorOfStringVector(); break;
		default: $this->_cPtr=new_VectorOfStringVector($n);
		}
	}

	function size() {
		return VectorOfStringVector_size($this->_cPtr);
	}

	function capacity() {
		return VectorOfStringVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		VectorOfStringVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		VectorOfStringVector_clear($this->_cPtr);
	}

	function push($x) {
		VectorOfStringVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return VectorOfStringVector_is_empty($this->_cPtr);
	}

	function pop() {
		$r=VectorOfStringVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function get($i) {
		$r=VectorOfStringVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function set($i,$val) {
		VectorOfStringVector_set($this->_cPtr,$i,$val);
	}
}

class SimpleState {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'SimpleState_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'SimpleState_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('SimpleState_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_CoolProp__SimpleState') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_SimpleState();
	}

	function fill($v) {
		SimpleState_fill($this->_cPtr,$v);
	}

	function is_valid() {
		return SimpleState_is_valid($this->_cPtr);
	}
}

class CriticalState extends SimpleState {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'stable') return CriticalState_stable_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		SimpleState::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'stable') return CriticalState_stable_get($this->_cPtr);
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return SimpleState::__get($var);
	}

	function __isset($var) {
		if (function_exists('CriticalState_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return SimpleState::__isset($var);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_CoolProp__CriticalState') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_CriticalState();
	}
}

class SsatSimpleState extends SimpleState {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'exists') return SsatSimpleState_exists_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		SimpleState::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'exists') return SsatSimpleState_exists_get($this->_cPtr);
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return SimpleState::__get($var);
	}

	function __isset($var) {
		if (function_exists('SsatSimpleState_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return SimpleState::__isset($var);
	}

	const SSAT_MAX_NOT_SET = 0;

	const SSAT_MAX_DOESNT_EXIST = SsatSimpleState_SSAT_MAX_DOESNT_EXIST;

	const SSAT_MAX_DOES_EXIST = SsatSimpleState_SSAT_MAX_DOES_EXIST;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_CoolProp__SsatSimpleState') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_SsatSimpleState();
	}
}

class SpinodalData {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'SpinodalData_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'M1') return new DoubleVector(SpinodalData_M1_get($this->_cPtr));
		if ($var === 'tau') return new DoubleVector(SpinodalData_tau_get($this->_cPtr));
		if ($var === 'delta') return new DoubleVector(SpinodalData_delta_get($this->_cPtr));
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('SpinodalData_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_CoolProp__SpinodalData') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_SpinodalData();
	}
}

class GuessesStructure {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'GuessesStructure_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'x') return new DoubleVector(GuessesStructure_x_get($this->_cPtr));
		if ($var === 'y') return new DoubleVector(GuessesStructure_y_get($this->_cPtr));
		$func = 'GuessesStructure_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('GuessesStructure_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_CoolProp__GuessesStructure') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_GuessesStructure();
	}
}

abstract class AbstractState {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	static function factory($backend,$fluid_names) {
		$r=AbstractState_factory($backend,$fluid_names);
		if (!is_resource($r)) return $r;
		return new AbstractState($r);
	}

	function set_T($T) {
		AbstractState_set_T($this->_cPtr,$T);
	}

	function backend_name() {
		return AbstractState_backend_name($this->_cPtr);
	}

	function using_mole_fractions() {
		return AbstractState_using_mole_fractions($this->_cPtr);
	}

	function using_mass_fractions() {
		return AbstractState_using_mass_fractions($this->_cPtr);
	}

	function using_volu_fractions() {
		return AbstractState_using_volu_fractions($this->_cPtr);
	}

	function set_mole_fractions($mole_fractions) {
		AbstractState_set_mole_fractions($this->_cPtr,$mole_fractions);
	}

	function set_mass_fractions($mass_fractions) {
		AbstractState_set_mass_fractions($this->_cPtr,$mass_fractions);
	}

	function set_volu_fractions($volu_fractions) {
		AbstractState_set_volu_fractions($this->_cPtr,$volu_fractions);
	}

	function mole_fractions_liquid() {
		$r=AbstractState_mole_fractions_liquid($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function mole_fractions_vapor() {
		$r=AbstractState_mole_fractions_vapor($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleVector($r);
		}
		return $r;
	}

	function get_mole_fractions() {
		return AbstractState_get_mole_fractions($this->_cPtr);
	}

	function get_mass_fractions() {
		return AbstractState_get_mass_fractions($this->_cPtr);
	}

	function update($input_pair,$Value1,$Value2) {
		AbstractState_update($this->_cPtr,$input_pair,$Value1,$Value2);
	}

	function update_with_guesses($input_pair,$Value1,$Value2,$guesses) {
		AbstractState_update_with_guesses($this->_cPtr,$input_pair,$Value1,$Value2,$guesses);
	}

	function available_in_high_level() {
		return AbstractState_available_in_high_level($this->_cPtr);
	}

	function fluid_param_string($arg1) {
		return AbstractState_fluid_param_string($this->_cPtr,$arg1);
	}

	function fluid_names() {
		$r=AbstractState_fluid_names($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringVector($r);
		}
		return $r;
	}

	function set_binary_interaction_double($CAS1_or_i,$CAS2_or_j,$parameter,$value) {
		AbstractState_set_binary_interaction_double($this->_cPtr,$CAS1_or_i,$CAS2_or_j,$parameter,$value);
	}

	function set_binary_interaction_string($CAS1,$CAS2,$parameter,$value) {
		AbstractState_set_binary_interaction_string($this->_cPtr,$CAS1,$CAS2,$parameter,$value);
	}

	function get_binary_interaction_double($CAS1_or_i,$CAS2_or_j,$parameter) {
		return AbstractState_get_binary_interaction_double($this->_cPtr,$CAS1_or_i,$CAS2_or_j,$parameter);
	}

	function get_binary_interaction_string($CAS1,$CAS2,$parameter) {
		return AbstractState_get_binary_interaction_string($this->_cPtr,$CAS1,$CAS2,$parameter);
	}

	function apply_simple_mixing_rule($i,$j,$model) {
		AbstractState_apply_simple_mixing_rule($this->_cPtr,$i,$j,$model);
	}

	function set_fluid_parameter_double($i,$parameter,$value) {
		AbstractState_set_fluid_parameter_double($this->_cPtr,$i,$parameter,$value);
	}

	function clear() {
		return AbstractState_clear($this->_cPtr);
	}

	function get_reducing_state() {
		$r=AbstractState_get_reducing_state($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new SimpleState($r);
		}
		return $r;
	}

	function get_state($state) {
		$r=AbstractState_get_state($this->_cPtr,$state);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new SimpleState($r);
		}
		return $r;
	}

	function Tmin() {
		return AbstractState_Tmin($this->_cPtr);
	}

	function Tmax() {
		return AbstractState_Tmax($this->_cPtr);
	}

	function pmax() {
		return AbstractState_pmax($this->_cPtr);
	}

	function Ttriple() {
		return AbstractState_Ttriple($this->_cPtr);
	}

	function phase() {
		return AbstractState_phase($this->_cPtr);
	}

	function specify_phase($phase) {
		AbstractState_specify_phase($this->_cPtr,$phase);
	}

	function unspecify_phase() {
		AbstractState_unspecify_phase($this->_cPtr);
	}

	function T_critical() {
		return AbstractState_T_critical($this->_cPtr);
	}

	function p_critical() {
		return AbstractState_p_critical($this->_cPtr);
	}

	function rhomolar_critical() {
		return AbstractState_rhomolar_critical($this->_cPtr);
	}

	function rhomass_critical() {
		return AbstractState_rhomass_critical($this->_cPtr);
	}

	function all_critical_points() {
		return AbstractState_all_critical_points($this->_cPtr);
	}

	function build_spinodal() {
		AbstractState_build_spinodal($this->_cPtr);
	}

	function get_spinodal_data() {
		$r=AbstractState_get_spinodal_data($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new SpinodalData($r);
		}
		return $r;
	}

	function criticality_contour_values($L1star,$M1star) {
		AbstractState_criticality_contour_values($this->_cPtr,$L1star,$M1star);
	}

	function tangent_plane_distance($T,$p,$w,$rhomolar_guess=-1.0) {
		return AbstractState_tangent_plane_distance($this->_cPtr,$T,$p,$w,$rhomolar_guess);
	}

	function T_reducing() {
		return AbstractState_T_reducing($this->_cPtr);
	}

	function rhomolar_reducing() {
		return AbstractState_rhomolar_reducing($this->_cPtr);
	}

	function rhomass_reducing() {
		return AbstractState_rhomass_reducing($this->_cPtr);
	}

	function p_triple() {
		return AbstractState_p_triple($this->_cPtr);
	}

	function name() {
		return AbstractState_name($this->_cPtr);
	}

	function dipole_moment() {
		return AbstractState_dipole_moment($this->_cPtr);
	}

	function keyed_output($key) {
		return AbstractState_keyed_output($this->_cPtr,$key);
	}

	function trivial_keyed_output($key) {
		return AbstractState_trivial_keyed_output($this->_cPtr,$key);
	}

	function saturated_liquid_keyed_output($key) {
		return AbstractState_saturated_liquid_keyed_output($this->_cPtr,$key);
	}

	function saturated_vapor_keyed_output($key) {
		return AbstractState_saturated_vapor_keyed_output($this->_cPtr,$key);
	}

	function T() {
		return AbstractState_T($this->_cPtr);
	}

	function rhomolar() {
		return AbstractState_rhomolar($this->_cPtr);
	}

	function rhomass() {
		return AbstractState_rhomass($this->_cPtr);
	}

	function p() {
		return AbstractState_p($this->_cPtr);
	}

	function Q() {
		return AbstractState_Q($this->_cPtr);
	}

	function tau() {
		return AbstractState_tau($this->_cPtr);
	}

	function delta() {
		return AbstractState_delta($this->_cPtr);
	}

	function molar_mass() {
		return AbstractState_molar_mass($this->_cPtr);
	}

	function acentric_factor() {
		return AbstractState_acentric_factor($this->_cPtr);
	}

	function gas_constant() {
		return AbstractState_gas_constant($this->_cPtr);
	}

	function Bvirial() {
		return AbstractState_Bvirial($this->_cPtr);
	}

	function dBvirial_dT() {
		return AbstractState_dBvirial_dT($this->_cPtr);
	}

	function Cvirial() {
		return AbstractState_Cvirial($this->_cPtr);
	}

	function dCvirial_dT() {
		return AbstractState_dCvirial_dT($this->_cPtr);
	}

	function compressibility_factor() {
		return AbstractState_compressibility_factor($this->_cPtr);
	}

	function hmolar() {
		return AbstractState_hmolar($this->_cPtr);
	}

	function hmass() {
		return AbstractState_hmass($this->_cPtr);
	}

	function hmolar_excess() {
		return AbstractState_hmolar_excess($this->_cPtr);
	}

	function hmass_excess() {
		return AbstractState_hmass_excess($this->_cPtr);
	}

	function smolar() {
		return AbstractState_smolar($this->_cPtr);
	}

	function smass() {
		return AbstractState_smass($this->_cPtr);
	}

	function smolar_excess() {
		return AbstractState_smolar_excess($this->_cPtr);
	}

	function smass_excess() {
		return AbstractState_smass_excess($this->_cPtr);
	}

	function umolar() {
		return AbstractState_umolar($this->_cPtr);
	}

	function umass() {
		return AbstractState_umass($this->_cPtr);
	}

	function umolar_excess() {
		return AbstractState_umolar_excess($this->_cPtr);
	}

	function umass_excess() {
		return AbstractState_umass_excess($this->_cPtr);
	}

	function cpmolar() {
		return AbstractState_cpmolar($this->_cPtr);
	}

	function cpmass() {
		return AbstractState_cpmass($this->_cPtr);
	}

	function cp0molar() {
		return AbstractState_cp0molar($this->_cPtr);
	}

	function cp0mass() {
		return AbstractState_cp0mass($this->_cPtr);
	}

	function cvmolar() {
		return AbstractState_cvmolar($this->_cPtr);
	}

	function cvmass() {
		return AbstractState_cvmass($this->_cPtr);
	}

	function gibbsmolar() {
		return AbstractState_gibbsmolar($this->_cPtr);
	}

	function gibbsmass() {
		return AbstractState_gibbsmass($this->_cPtr);
	}

	function gibbsmolar_excess() {
		return AbstractState_gibbsmolar_excess($this->_cPtr);
	}

	function gibbsmass_excess() {
		return AbstractState_gibbsmass_excess($this->_cPtr);
	}

	function helmholtzmolar() {
		return AbstractState_helmholtzmolar($this->_cPtr);
	}

	function helmholtzmass() {
		return AbstractState_helmholtzmass($this->_cPtr);
	}

	function helmholtzmolar_excess() {
		return AbstractState_helmholtzmolar_excess($this->_cPtr);
	}

	function helmholtzmass_excess() {
		return AbstractState_helmholtzmass_excess($this->_cPtr);
	}

	function volumemolar_excess() {
		return AbstractState_volumemolar_excess($this->_cPtr);
	}

	function volumemass_excess() {
		return AbstractState_volumemass_excess($this->_cPtr);
	}

	function speed_sound() {
		return AbstractState_speed_sound($this->_cPtr);
	}

	function isothermal_compressibility() {
		return AbstractState_isothermal_compressibility($this->_cPtr);
	}

	function isobaric_expansion_coefficient() {
		return AbstractState_isobaric_expansion_coefficient($this->_cPtr);
	}

	function fugacity_coefficient($i) {
		return AbstractState_fugacity_coefficient($this->_cPtr,$i);
	}

	function fugacity($i) {
		return AbstractState_fugacity($this->_cPtr,$i);
	}

	function chemical_potential($i) {
		return AbstractState_chemical_potential($this->_cPtr,$i);
	}

	function fundamental_derivative_of_gas_dynamics() {
		return AbstractState_fundamental_derivative_of_gas_dynamics($this->_cPtr);
	}

	function PIP() {
		return AbstractState_PIP($this->_cPtr);
	}

	function true_critical_point($T,$rho) {
		AbstractState_true_critical_point($this->_cPtr,$T,$rho);
	}

	function ideal_curve($type,$T,$p) {
		AbstractState_ideal_curve($this->_cPtr,$type,$T,$p);
	}

	function first_partial_deriv($Of,$Wrt,$Constant) {
		return AbstractState_first_partial_deriv($this->_cPtr,$Of,$Wrt,$Constant);
	}

	function second_partial_deriv($Of1,$Wrt1,$Constant1,$Wrt2,$Constant2) {
		return AbstractState_second_partial_deriv($this->_cPtr,$Of1,$Wrt1,$Constant1,$Wrt2,$Constant2);
	}

	function first_saturation_deriv($Of1,$Wrt1) {
		return AbstractState_first_saturation_deriv($this->_cPtr,$Of1,$Wrt1);
	}

	function second_saturation_deriv($Of1,$Wrt1,$Wrt2) {
		return AbstractState_second_saturation_deriv($this->_cPtr,$Of1,$Wrt1,$Wrt2);
	}

	function first_two_phase_deriv($Of,$Wrt,$Constant) {
		return AbstractState_first_two_phase_deriv($this->_cPtr,$Of,$Wrt,$Constant);
	}

	function second_two_phase_deriv($Of,$Wrt1,$Constant1,$Wrt2,$Constant2) {
		return AbstractState_second_two_phase_deriv($this->_cPtr,$Of,$Wrt1,$Constant1,$Wrt2,$Constant2);
	}

	function first_two_phase_deriv_splined($Of,$Wrt,$Constant,$x_end) {
		return AbstractState_first_two_phase_deriv_splined($this->_cPtr,$Of,$Wrt,$Constant,$x_end);
	}

	function build_phase_envelope($type=null) {
		switch (func_num_args()) {
		case 0: AbstractState_build_phase_envelope($this->_cPtr); break;
		default: AbstractState_build_phase_envelope($this->_cPtr,$type);
		}
	}

	function get_phase_envelope_data() {
		$r=AbstractState_get_phase_envelope_data($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new PhaseEnvelopeData($r);
		}
		return $r;
	}

	function has_melting_line() {
		return AbstractState_has_melting_line($this->_cPtr);
	}

	function melting_line($param,$given,$value) {
		return AbstractState_melting_line($this->_cPtr,$param,$given,$value);
	}

	function saturation_ancillary($param,$Q,$given,$value) {
		return AbstractState_saturation_ancillary($this->_cPtr,$param,$Q,$given,$value);
	}

	function viscosity() {
		return AbstractState_viscosity($this->_cPtr);
	}

	function viscosity_contributions($dilute,$initial_density,$residual,$critical) {
		AbstractState_viscosity_contributions($this->_cPtr,$dilute,$initial_density,$residual,$critical);
	}

	function conductivity() {
		return AbstractState_conductivity($this->_cPtr);
	}

	function conductivity_contributions($dilute,$initial_density,$residual,$critical) {
		AbstractState_conductivity_contributions($this->_cPtr,$dilute,$initial_density,$residual,$critical);
	}

	function surface_tension() {
		return AbstractState_surface_tension($this->_cPtr);
	}

	function Prandtl() {
		return AbstractState_Prandtl($this->_cPtr);
	}

	function conformal_state($reference_fluid,$T,$rhomolar) {
		AbstractState_conformal_state($this->_cPtr,$reference_fluid,$T,$rhomolar);
	}

	function change_EOS($i,$EOS_name) {
		AbstractState_change_EOS($this->_cPtr,$i,$EOS_name);
	}

	function alpha0() {
		return AbstractState_alpha0($this->_cPtr);
	}

	function dalpha0_dDelta() {
		return AbstractState_dalpha0_dDelta($this->_cPtr);
	}

	function dalpha0_dTau() {
		return AbstractState_dalpha0_dTau($this->_cPtr);
	}

	function d2alpha0_dDelta2() {
		return AbstractState_d2alpha0_dDelta2($this->_cPtr);
	}

	function d2alpha0_dDelta_dTau() {
		return AbstractState_d2alpha0_dDelta_dTau($this->_cPtr);
	}

	function d2alpha0_dTau2() {
		return AbstractState_d2alpha0_dTau2($this->_cPtr);
	}

	function d3alpha0_dTau3() {
		return AbstractState_d3alpha0_dTau3($this->_cPtr);
	}

	function d3alpha0_dDelta_dTau2() {
		return AbstractState_d3alpha0_dDelta_dTau2($this->_cPtr);
	}

	function d3alpha0_dDelta2_dTau() {
		return AbstractState_d3alpha0_dDelta2_dTau($this->_cPtr);
	}

	function d3alpha0_dDelta3() {
		return AbstractState_d3alpha0_dDelta3($this->_cPtr);
	}

	function alphar() {
		return AbstractState_alphar($this->_cPtr);
	}

	function dalphar_dDelta() {
		return AbstractState_dalphar_dDelta($this->_cPtr);
	}

	function dalphar_dTau() {
		return AbstractState_dalphar_dTau($this->_cPtr);
	}

	function d2alphar_dDelta2() {
		return AbstractState_d2alphar_dDelta2($this->_cPtr);
	}

	function d2alphar_dDelta_dTau() {
		return AbstractState_d2alphar_dDelta_dTau($this->_cPtr);
	}

	function d2alphar_dTau2() {
		return AbstractState_d2alphar_dTau2($this->_cPtr);
	}

	function d3alphar_dDelta3() {
		return AbstractState_d3alphar_dDelta3($this->_cPtr);
	}

	function d3alphar_dDelta2_dTau() {
		return AbstractState_d3alphar_dDelta2_dTau($this->_cPtr);
	}

	function d3alphar_dDelta_dTau2() {
		return AbstractState_d3alphar_dDelta_dTau2($this->_cPtr);
	}

	function d3alphar_dTau3() {
		return AbstractState_d3alphar_dTau3($this->_cPtr);
	}

	function d4alphar_dDelta4() {
		return AbstractState_d4alphar_dDelta4($this->_cPtr);
	}

	function d4alphar_dDelta3_dTau() {
		return AbstractState_d4alphar_dDelta3_dTau($this->_cPtr);
	}

	function d4alphar_dDelta2_dTau2() {
		return AbstractState_d4alphar_dDelta2_dTau2($this->_cPtr);
	}

	function d4alphar_dDelta_dTau3() {
		return AbstractState_d4alphar_dDelta_dTau3($this->_cPtr);
	}

	function d4alphar_dTau4() {
		return AbstractState_d4alphar_dTau4($this->_cPtr);
	}
}

class PhaseEnvelopeData {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'PhaseEnvelopeData_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'speed_sound_vap') return new DoubleVector(PhaseEnvelopeData_speed_sound_vap_get($this->_cPtr));
		if ($var === 'lnp') return new DoubleVector(PhaseEnvelopeData_lnp_get($this->_cPtr));
		if ($var === 'x') return new VectorOfDoubleVector(PhaseEnvelopeData_x_get($this->_cPtr));
		if ($var === 'y') return new VectorOfDoubleVector(PhaseEnvelopeData_y_get($this->_cPtr));
		if ($var === 'hmolar_liq') return new DoubleVector(PhaseEnvelopeData_hmolar_liq_get($this->_cPtr));
		if ($var === 'lnrhomolar_liq') return new DoubleVector(PhaseEnvelopeData_lnrhomolar_liq_get($this->_cPtr));
		if ($var === 'rhomolar_liq') return new DoubleVector(PhaseEnvelopeData_rhomolar_liq_get($this->_cPtr));
		if ($var === 'smolar_liq') return new DoubleVector(PhaseEnvelopeData_smolar_liq_get($this->_cPtr));
		if ($var === 'cpmolar_liq') return new DoubleVector(PhaseEnvelopeData_cpmolar_liq_get($this->_cPtr));
		if ($var === 'cvmolar_liq') return new DoubleVector(PhaseEnvelopeData_cvmolar_liq_get($this->_cPtr));
		if ($var === 'viscosity_liq') return new DoubleVector(PhaseEnvelopeData_viscosity_liq_get($this->_cPtr));
		if ($var === 'conductivity_liq') return new DoubleVector(PhaseEnvelopeData_conductivity_liq_get($this->_cPtr));
		if ($var === 'lnT') return new DoubleVector(PhaseEnvelopeData_lnT_get($this->_cPtr));
		if ($var === 'lnrhomolar_vap') return new DoubleVector(PhaseEnvelopeData_lnrhomolar_vap_get($this->_cPtr));
		if ($var === 'rhomolar_vap') return new DoubleVector(PhaseEnvelopeData_rhomolar_vap_get($this->_cPtr));
		if ($var === 'hmolar_vap') return new DoubleVector(PhaseEnvelopeData_hmolar_vap_get($this->_cPtr));
		if ($var === 'smolar_vap') return new DoubleVector(PhaseEnvelopeData_smolar_vap_get($this->_cPtr));
		if ($var === 'cpmolar_vap') return new DoubleVector(PhaseEnvelopeData_cpmolar_vap_get($this->_cPtr));
		if ($var === 'cvmolar_vap') return new DoubleVector(PhaseEnvelopeData_cvmolar_vap_get($this->_cPtr));
		if ($var === 'K') return new VectorOfDoubleVector(PhaseEnvelopeData_K_get($this->_cPtr));
		if ($var === 'viscosity_vap') return new DoubleVector(PhaseEnvelopeData_viscosity_vap_get($this->_cPtr));
		if ($var === 'conductivity_vap') return new DoubleVector(PhaseEnvelopeData_conductivity_vap_get($this->_cPtr));
		if ($var === 'p') return new DoubleVector(PhaseEnvelopeData_p_get($this->_cPtr));
		if ($var === 'Q') return new DoubleVector(PhaseEnvelopeData_Q_get($this->_cPtr));
		if ($var === 'lnK') return new VectorOfDoubleVector(PhaseEnvelopeData_lnK_get($this->_cPtr));
		if ($var === 'T') return new DoubleVector(PhaseEnvelopeData_T_get($this->_cPtr));
		$func = 'PhaseEnvelopeData_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('PhaseEnvelopeData_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_CoolProp__PhaseEnvelopeData') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_PhaseEnvelopeData();
	}

	function resize($N) {
		PhaseEnvelopeData_resize($this->_cPtr,$N);
	}

	function clear() {
		PhaseEnvelopeData_clear($this->_cPtr);
	}

	function insert_variables($T,$p,$rhomolar_liq,$rhomolar_vap,$hmolar_liq,$hmolar_vap,$smolar_liq,$smolar_vap,$x,$y,$i) {
		PhaseEnvelopeData_insert_variables($this->_cPtr,$T,$p,$rhomolar_liq,$rhomolar_vap,$hmolar_liq,$hmolar_vap,$smolar_liq,$smolar_vap,$x,$y,$i);
	}

	function store_variables($T,$p,$rhomolar_liq,$rhomolar_vap,$hmolar_liq,$hmolar_vap,$smolar_liq,$smolar_vap,$x,$y) {
		PhaseEnvelopeData_store_variables($this->_cPtr,$T,$p,$rhomolar_liq,$rhomolar_vap,$hmolar_liq,$hmolar_vap,$smolar_liq,$smolar_vap,$x,$y);
	}
}

class ConfigurationItem {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($key,$val) {
		if (is_resource($key) && get_resource_type($key) === '_p_CoolProp__ConfigurationItem') {
			$this->_cPtr=$key;
			return;
		}
		$this->_cPtr=new_ConfigurationItem($key,$val);
	}

	function set_bool($val) {
		ConfigurationItem_set_bool($this->_cPtr,$val);
	}

	function set_integer($val) {
		ConfigurationItem_set_integer($this->_cPtr,$val);
	}

	function set_double($val) {
		ConfigurationItem_set_double($this->_cPtr,$val);
	}

	function set_string($val) {
		ConfigurationItem_set_string($this->_cPtr,$val);
	}

	function get_key() {
		return ConfigurationItem_get_key($this->_cPtr);
	}
}

class Configuration {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_CoolProp_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_CoolProp_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_CoolProp__Configuration') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Configuration();
	}

	function get_item($key) {
		$r=Configuration_get_item($this->_cPtr,$key);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ConfigurationItem($r);
		}
		return $r;
	}

	function add_item($item) {
		Configuration_add_item($this->_cPtr,$item);
	}

	function get_items() {
		return Configuration_get_items($this->_cPtr);
	}

	function set_defaults() {
		Configuration_set_defaults($this->_cPtr);
	}
}


?>
